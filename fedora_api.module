<?php

// $Id:$

/**
 * $file
 *
 * A wrapper for the Fedora Repository's API-A and API-M calls.  Function names
 * match the naming and capitalization conventions of the SOAP functions.
 */

function fedora_api_perm() {
    return('administer fedora');
}

function fedora_api_menu() {
  $items = array();
  $items['admin/settings/fedora_repository'] = array (
    'title' => t('Fedora Server Settings'),
    'description' => t('Enter the Fedora Collection information here'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fedora_api_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/fedora_repository/server'] = array(
    'title' => 'Fedora Server Settings',
    'description' => 'Configure Fedora Repository API server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fedora_api_settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'access arguments' => array('administer fedora api'),
  );
  return $items;
}

/**
 * Creates teh administration settings page to let the user specify the location
 * of the Feodra Repository server.
 */
function fedora_api_settings() {
  $form = array();
  $form['fedora_base_url'] = array (
    '#type' => 'textfield',
    '#title' => t('Fedora server URL'),
    '#default_value' => variable_get('fedora_base_url', 'http://localhost:8080/fedora'),
    '#description' => t('The Fedora server URL'),
    '#required' => TRUE,
    '#weight' => -10,
  );
  $form['fedora_user'] = array(
    '#type' => 'textfield',
    '#title' => 'Feodra User',
    '#default_value' => variable_get('fedora_user', 'fedoraAdmin'),
    '#description' => t('The username to use when ocnnecting to the Fedora server.'),
    '#required' => FALSE,
    '#weight' => -9,
  );
  $form['fedora_password'] = array(
    '#type' => 'textfield',
    '#title' => 'Password',
    '#default_value' => variable_get('fedora_password', ''),
    '#description' => t('Password for this Fedora user.'),
    '#required' => FALSE,
    '#weight' => -8,
  );

  $form['#submit'][] = 'fedora_repository_admin_settings_submit';
  $form['#weight'] = 10;
  return system_settings_form($form);
}

/************************************************************************
 * API-A
 ************************************************************************/

/**
 *
 * @param <type> $terms
 * @param <type> $query
 * @param <type> $maxResults
 * @param <type> $resultFormat
 * @param <type> $displayFields
 * @return StdClass HTTP Response object. 'data' has XML set of results
 * <?xml version="1.0" encoding="UTF-8"?>
 * <result xmlns="http://www.fedora.info/definitions/1/0/types/">
 *   <resultList>
 *   <objectFields>
 *       <pid>islandora:collectionCModel</pid>
 *       <title>Islandora Collection Content Model</title>
 *   </objectFields>
 *   <objectFields>
 *       <pid>islandora:strict_pdf</pid>
 *       <title>Strict PDF</title>
 *   </objectFields>
 *   </resultList>
 * </result>
 */
function findObjects($terms = '', $query = '', $maxResults = '', $resultFormat = 'xml', $displayFields = array('pid', 'title')) {
  $request = variable_get('fedora_base_url', 'http://localhost:8080/fedora')."/objects?";

  if (!empty($terms)) {
    $request .= "terms=".drupal_urlencode($terms);
  }
  else if (!empty($query)) {
    $request .= "query=".drupal_urlencode($query);
  }

  $request .= "&resultFormat=$resultFormat";

  foreach($displayFields as $displayField) {
    $request .= "&$displayField=true";
  }
  $response = drupal_http_request($request);
  if (!empty($response->error)) {
    watchdog('fedora api', 'Error executing Fedora REST request %request: %error', array('%request' => $request, '%error' => $response->error), 'error');
  }
  return $response;
}

/**
 *
 * @param String $pid persistent identifier of the digital object
 * @param String $dsID datastream identifier
 * @param String $asOfDateTime indicates that the result should be relative to the digital object as it existed at the given date and time
 * @param String $download If true,  a content-disposition header value "attachment" will be included in the response, prompting the user to save the datastream as a file.  A content-disposition header value "inline" will be used otherwise.  The filename used in the header is generated by examining in order: RELS-INT for the relationship fedora-model:downloadFilename, the datastream label, and the datastream ID.  The file extension (apart from where the filename is specified in RELS-INT) is determined from the MIMETYPE.  The order in which these filename sources are searched, and whether or not to generate an extension from the MIMETYPE, is configured in fedora.fcfg.  The file used to map between MIMETYPEs and extensions is mime-to-extensions.xml located in the server config directory.
 */
function getDatastreamDissemination($pid, $dsID, $asOfDateTime = '', $download = '') {
  $pid = drupal_urlencode($pid);
  $fedora_user = variable_get('fedora_user', 'fedoraAdmin');
  $fedora_pass = variable_get('fedora_password', 'fedoraAdmin');
  $fedora_uri = _insert_credentials_into_url(variable_get('fedora_base_url', 'http://localhost:8080/fedora'), variable_get('fedora_user', 'fedoraAdmin'), variable_get('fedora_password', 'fedoraAdmin'));
  $request = "$fedora_uri/objects/$pid/datastreams/$dsID/content";
  $request .= (!empty($asOfDateTime) ? "&asOfDateTime=$asOfDateTime" : '');
  if (!empty($download)) {
    $request .= (!empty($asOfDateTime) ? '&' : '?');
    $request .= "download=$download";
  }

  $response = drupal_http_request($request);
  if (!empty($response->error)) {
    watchdog('fedora api', 'Error executing Fedora REST request %request: %error', array('%request' => $request, '%error' => $response->error), 'error');
  }
  return $response;
}

/**
 *
 * @param String $pid
 * @param String $sdefPid
 * @param String $method
 * @param String $methodParameters A key-value paired array of parameters
 * @return StdClass HTTP response object
 */
function getDissemination($pid, $sdefPid, $method, $methodParameters = array()) {
  $pid = drupal_urlencode($pid);
  $sdefPid = drupal_urlencode($sdefPid);
  
  $fedora_user = variable_get('fedora_user', 'fedoraAdmin');
  $fedora_pass = variable_get('fedora_password', 'fedoraAdmin');
  $fedora_uri = _insert_credentials_into_url(variable_get('fedora_base_url', 'http://localhost:8080/fedora'), variable_get('fedora_user', 'fedoraAdmin'), variable_get('fedora_password', 'fedoraAdmin'));
  $request = "$fedora_uri/objects/$pid/methods/$sdefPid/$method?";
  
  //$request .= (!empty($asOfDateTime) ? "&asOfDateTime=$asOfDateTime" : '');
  foreach($methodParameters as $param_name => $param_value) {
    $request .= $param_name.(!empty($param_value) ? "=$param_value&" : '&');
  }

  $response = drupal_http_request($request);
  if (!empty($response->error)) {
    watchdog('fedora api', 'Error executing Fedora REST request %request: %error', array('%request' => $request, '%error' => $response->error), 'error');
  }
  return $response;
}
/**
 *
 * @param String $pid persistent identifier of the digital object
 * @param String $format the preferred output format (xml, html)
 * @return HTTP response object.
 * $response->data looks like:
 * <?xml version="1.0" encoding="utf-16"?>
 * <fedoraObjectHistory xsi:schemaLocation="http://www.fedora.info/definitions/1/0/access/ http://localhost:8080/fedoraObjectHistory.xsd" pid="demo:29" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 *     <objectChangeDate>2008-07-02T05:09:43.234Z</objectChangeDate>
 * </fedoraObjectHistory>
 */
function getObjectHistory($pid, $format = 'xml') {
  $pid = drupal_urlencode($pid);
  $request = variable_get('fedora_base_url', 'http://localhost:8080/fedora')."/objects/$pid/versions?format=$format";
  $response = drupal_http_request($request);
  if (!empty($response->error)) {
    watchdog('fedora api', 'Error executing Fedora REST request %request: %error', array('%request' => $request, '%error' => $response->error), 'error');
  }
  return $response;
}

/**
 * Implements the getObjectProfile Fedora API-A method.
 * @param String $pid
 * @param String $format
 * @param String $asOfDateTime
 * @return StdClass HTTP Response object. 'data' has XML response string
 * Response is of the form:
 * <?xml version="1.0" encoding="utf-16"?>
 * <objectProfile xsi:schemaLocation="http://www.fedora.info/definitions/1/0/access/ http://localhost:8080/objectProfile.xsd" pid="islandora:demos" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 *     <objLabel>Islandora Demo Collections</objLabel>
 *     <objOwnerId>fedoraAdmin</objOwnerId>
 *     <objModels>
 *         <model>info:fedora/islandora:collectionCModel</model>
 *         <model>info:fedora/fedora-system:FedoraObject-3.0</model>
 *     </objModels>
 *     <objCreateDate>2009-03-10T07:09:53.333Z</objCreateDate>
 *     <objLastModDate>2010-03-20T23:39:58.490Z</objLastModDate>
 *     <objDissIndexViewURL>http://localhost:8080/fedora/get/islandora:demos/fedora-system:3/viewMethodIndex</objDissIndexViewURL>
 *     <objItemIndexViewURL>http://localhost:8080/fedora/get/islandora:demos/fedora-system:3/viewItemIndex</objItemIndexViewURL>
 *     <objState>A</objState>
 * </objectProfile>
 */
function getObjectProfile($pid, $format = 'xml', $asOfDateTime = '') {
  $pid = drupal_urlencode($pid);
  $request = variable_get('fedora_base_url', 'http://localhost:8080/fedora')."/objects/$pid?format=$format";
  $request .= (!empty($asOfDateTime) ? "&asOfDateTime=$asOfDateTime" : '');
  $response = drupal_http_request($request);
  if (!empty($response->error)) {
    watchdog('fedora api', 'Error executing Fedora REST request %request: %error', array('%request' => $request, '%error' => $response->error), 'error');
  }
  return $response;
}

/**
 *
 * @param <type> $pid
 * @param <type> $format
 * @param <type> $asOfDateTime
 * @return StdClass HTTP Response object. 'data' has XML Response
 * XML is of the form:
 * <?xml version="1.0" encoding="utf-16"?>
 * <objectDatastreams xsi:schemaLocation="http://www.fedora.info/definitions/1/0/access/ http://localhost:8080/listDatastreams.xsd" pid="islandora:demos" baseURL="http://localhost:8080/fedora/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 *     <datastream dsid="DC" label="Dublin Core Record for this object" mimeType="text/xml" />
 *     <datastream dsid="RELS-EXT" label="RDF Statements about this object" mimeType="application/rdf+xml" />
 *     <datastream dsid="COLLECTION_POLICY" label="Collection Policy" mimeType="text/xml" />
 *     <datastream dsid="TN" label="Thumbnail.png" mimeType="image/png" />
 * </objectDatastreams>
 */
function listDatastreams($pid, $format = 'xml', $asOfDateTime = '') {
  $pid = drupal_urlencode($pid);
  $request = variable_get('fedora_base_url', 'http://localhost:8080/fedora')."/objects/$pid/datastreams?format=$format";
  $request .= (!empty($asOfDateTime) ? "&asOfDateTime=$asOfDateTime" : '');
  $response = drupal_http_request($request);
  if (!empty($response->error)) {
    watchdog('fedora api', 'Error executing Fedora REST request %request: %error', array('%request' => $request, '%error' => $response->error), 'error');
  }
  return $response;
}

/**
 *
 * @param String $pid persistent identifier of the digital object
 * @param String $sdefPid persistent identifier of the SDef defining the methods
 * @param String $format the preferred output format
 * @param String $asOfDateTime indicates that the result should be relative to the digital object as it existed on the given date
 * @return StdClass HTTP Response object. 'data' has response XML
 * Response is of the form:
 * <?xml version="1.0" encoding="utf-16"?>
 * <objectMethods xsi:schemaLocation="http://www.fedora.info/definitions/1/0/access/ http://localhost:8080/listMethods.xsd" pid="islandora:demos" baseURL="http://localhost:8080/fedora/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 *     <sDef pid="fedora-system:3">
 *         <method name="viewObjectProfile"></method>
 *         <method name="viewMethodIndex"></method>
 *         <method name="viewItemIndex"></method>
 *         <method name="viewDublinCore"></method>
 *     </sDef>
 * </objectMethods>
 */
function listMethods($pid, $sdefPid = '', $format = 'xml', $asOfDateTime = '') {
  $pid = drupal_urlencode($pid);
  $request = variable_get('fedora_base_url', 'http://localhost:8080/fedora')."/objects/$pid/methods";
  $request .= (!empty($sdefPid) ? "/$sdefPid" : '');
  $request .= "?format=$format";
  $request .= (!empty($asOfDateTime) ? "&asOfDateTime=$asOfDateTime" : '');
  $response = drupal_http_request($request);
  if (!empty($response->error)) {
    watchdog('fedora api', 'Error executing Fedora REST request %request: %error', array('%request' => $request, '%error' => $response->error), 'error');
  }
  return $response;
}

/************************************************************************
 * API-A
 ************************************************************************/

function addDatastream($pid, $dsID, $controlGroup, $file_path = '', $ds_string = '', $dsLocation = '', $altIDs = '', $dsLabel = '', $dsState = 'A',
                       $formatURI = '', $checksumType = '', $checksum = '', $mimeType = '',
                       $logMessage = '') {
  // If $file_path is specified ignore dsLocation.
  //$headers = array('Content-Type' => 'multipart/form-data');
  $pid = drupal_urlencode($pid);
  $dsLabel = drupal_urlencode($dsLabel);
  //$dsLocation = drupal_urlencode($dsLocation);
  $formatURI = drupal_urlencode($formatURI);
  $logMessage = drupal_urlencode($logMessage);

  $params = NULL;
  
  $headers = array('Keep-Alive' => 115,
                   'Connection' => 'keep-alive');
  if (!empty($dsLocation)) {
    if ($controlGroup == 'X') {
      $headers['Content-Type'] = 'text/xml';
    }
    elseif (!empty($mimeType)) {
      $headers['Content-Type'] = $mimeType;
    }
    else {
      // TODO: More sophisticated MIME type detection. Possibly including retrieving headers of $dsLocation
      $headers['Content-Type'] = 'application/x-octet-stream';
    }
  }
  elseif (!empty($file_path)) {
    // We must construct a multipart HTTP POST.
    $boundary = 'A0sFSD';
    $headers["Content-Type"] = "multipart/form-data; boundary=$boundary";
    $params = multipart_encode($boundary, array('file' => $file_path));
  }
  elseif (!empty($ds_string)) {
    // We must construct a multipart HTTP POST.
    $boundary = 'A0sFSD';
    $headers["Content-Type"] = "multipart/form-data; boundary=$boundary";
    $params = multipart_encode($boundary, array('string' => $ds_string));
  }
  else {
    return NULL;
  }
  
  $fedora_uri = _insert_credentials_into_url(variable_get('fedora_base_url', 'http://localhost:8080/fedora'), variable_get('fedora_user', 'fedoraAdmin'), variable_get('fedora_password', 'fedoraAdmin'));
  $request = $fedora_uri."/objects/$pid/datastreams/$dsID?";

  $request .= (!empty($controlGroup) ? "controlGroup=$controlGroup&" : '')
           .(!empty($dsLocation) ? "dsLocation=$dsLocation&" : '')
           .(!empty($altIDs) ? "altIDs=$altIDs&" : '')
           .(!empty($dsLabel) ? "dsLabel=$dsLabel&" : '')
           .(!empty($dsState) ? "dsState=$dsState&" : '')
           .(!empty($formatURI) ? "formatURI=$formatURI&" : '')
           .(!empty($checksumType) ? "checksumType=$checksumType&" : '')
           .(!empty($checksum) ? "checksum=$checksum&" : '')
           .(!empty($mimeType) ? "mimeType=$mimeType&" : '')
           .(!empty($logMessage) ? "logMessage=$logMessage" : '');
  $response = drupal_http_request($request, $headers, 'POST', $params);
  return $response;
}

/**
 * Export a Fedora object with the given PID.
 *
 * @param String $pid
 * @param String $format
 *        One of: info:fedora/fedora-system:FOXML-1.1, info:fedora/fedora-system:FOXML-1.0, info:fedora/fedora-system:METSFedoraExt-1.1, info:fedora/fedora-system:METSFedoraExt-1.0, info:fedora/fedora-system:ATOM-1.1, info:fedora/fedora-system:ATOMZip-1.1
 * @param String $context
 *        One of: public, migrate, archive
 * @param String $encoding
 * @return StdClass HTTP Response object
 */
function fedora_export($pid, $format = 'info:fedora/fedora-system:FOXML-1.1', $context = 'public', $encoding = 'UTF-8') {
  $pid = drupal_urlencode($pid);
  $format = drupal_urlencode($format);
  
  $fedora_uri = _insert_credentials_into_url(variable_get('fedora_base_url', 'http://localhost:8080/fedora'), variable_get('fedora_user', 'fedoraAdmin'), variable_get('fedora_password', 'fedoraAdmin'));
  $request = $fedora_uri."/objects/$pid/export?";

  $request .= (!empty($format) ? "format=$format&" : '')
           .(!empty($context) ? "context=$context&" : '')
           .(!empty($encoding) ? "encoding=$encoding" : '');
  $response = drupal_http_request($request);
  return $response;
}

/**
 *
 * @param <type> $numPIDS
 * @param <type> $namespace
 * @param <type> $format
 * @return StdClass HTTP response
 * $response->data looks like this:
 * <?xml version="1.0" encoding="UTF-8"?>
 * <pidList  xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.fedora.info/definitions/1/0/management/ http://localhost:8080/getNextPIDInfo.xsd">
 *   <pid>changeme:2</pid>
 * </pidList>
 */
function getNextPID($numPIDS = 1, $namespace = '', $format = 'xml') {
  $fedora_uri = _insert_credentials_into_url(variable_get('fedora_base_url', 'http://localhost:8080/fedora'), variable_get('fedora_user', 'fedoraAdmin'), variable_get('fedora_password', 'fedoraAdmin'));
  $request = $fedora_uri."/objects/nextPID?";
  $request .= (!empty($numPIDS) ? "numPIDS=$numPIDS&" : '')
           .(!empty($namespace) ? "namespace=$namespace&" : '')
           .(!empty($format) ? "format=$format" : '');
  $response = drupal_http_request($request, array(), 'POST');
  return $response;
}

/**
 *
 * @param String $pid
 * @return StdClass HTTP response object.
 */
function getObjectXML($pid) {
  $pid = drupal_urlencode($pid);
  $fedora_uri = _insert_credentials_into_url(variable_get('fedora_base_url', 'http://localhost:8080/fedora'), variable_get('fedora_user', 'fedoraAdmin'), variable_get('fedora_password', 'fedoraAdmin'));
  $request = $fedora_uri."/objects/$pid/objectXML";
  $response = drupal_http_request($request);
  return $response;
}

/**
 *
 * @param String $foxml_file
 * @param String $foxml_string
 * @param String $pid
 * @param String $new
 * @param String $label
 * @param String $format
 * @param String $encoding
 * @param String $namespace
 * @param String $ownerId
 * @param String $logMessage
 * @param String $ignoreMime
 * @return StdClass HTTP Response Object
 * $response->data contains just the PID of the ingested object.
 *
 * Issue
 */
function ingest($foxml_file = '', $foxml_string = '', $pid = '', $new = TRUE, $label = '', $format = 'info:fedora/fedora-system:FOXML-1.1', $encoding = 'UTF-8', $namespace = '',
                $ownerId = '', $logMessage = '', $ignoreMime = 'false') {
  if (empty($pid)) {
    // Set $new to TRUE regardless of what the user specified if no PID is given
    $pid = "new";
  }
  else {
    $pid = drupal_urlencode($pid);
  }
  $label = drupal_urlencode($label);
  $format = drupal_urlencode($format);
  $logMessage = drupal_urlencode($logMessage);
  $params = NULL;
  $headers = array('Keep-Alive' => 115,
                   'Connection' => 'keep-alive');
  if (!empty($foxml_file)) {
    // We must construct a multipart HTTP POST.
    $boundary = 'A0sFSD';
    $headers["Content-Type"] = "multipart/form-data; boundary=$boundary";
    $params = multipart_encode($boundary, array('foxml_file' => $foxml_file));
  }
  elseif (!empty($foxml_string)) {
    // We must construct a multipart HTTP POST.
    $boundary = 'A0sFSD';
    $headers["Content-Type"] = "multipart/form-data; boundary=$boundary";
    $params = multipart_encode($boundary, array('string' => $foxml_string));
  }
  else {
    return NULL;
  }

  $fedora_uri = _insert_credentials_into_url(variable_get('fedora_base_url', 'http://localhost:8080/fedora'), variable_get('fedora_user', 'fedoraAdmin'), variable_get('fedora_password', 'fedoraAdmin'));

  $request = $fedora_uri."/objects/$pid?";

  $request .= (!empty($label) ? "label=$label&" : '')
           .(!empty($format) ? "format=$format&" : '')
           .(!empty($encoding) ? "encoding=$encoding&" : '')
           .(!empty($namespace) ? "namespace=$namespace&" : '')
           .(!empty($ownerId) ? "ownerId=$ownerId&" : '')
           .(!empty($logMessage) ? "logMessage=$logMessage&" : '')
           .(!empty($igncoreMime) ? "ignoreMime=$ignoreMime&" : '');
  $response = drupal_http_request($request, $headers, 'POST', $params);
  return $response;

}

/**
 * Due ot a bug in Fedora you need to specify the Mime Type for each call.
 * @param <type> $pid
 * @param <type> $dsID
 * @param <type> $file_path
 * @param <type> $dsLocation
 * @param <type> $altIDs
 * @param <type> $dsLabel
 * @param <type> $versionable
 * @param <type> $dsState
 * @param <type> $formatURI
 * @param <type> $checksumType
 * @param <type> $checksum
 * @param <type> $mimeType
 * @param <type> $logMessage
 * @param <type> $force
 * @param <type> $ignoreContent
 * @return StdClass HTTP response object
 * $response->data XML looks like this:
 * <?xml version="1.0" encoding="utf-16"?>
 * <datastreamProfile xsi:schemaLocation="http://www.fedora.info/definitions/1/0/management/ http://localhost:8080/datastreamProfile.xsd" pid="islandora:demos" dsID="TN" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 *     <dsLabel>Thumbnail.png</dsLabel>
 *     <dsVersionID>TN.4</dsVersionID>
 *     <dsCreateDate>2010-04-08T12:27:01.966Z</dsCreateDate>
 *     <dsState>A</dsState>
 *     <dsMIME>image/png</dsMIME>
 *     <dsFormatURI/>
 *     <dsControlGroup>M</dsControlGroup>
 *     <dsSize>0</dsSize>
 *     <dsVersionable>true</dsVersionable>
 *     <dsInfoType/>
 *     <dsLocation>islandora:demos+TN+TN.4</dsLocation>
 *     <dsLocationType>INTERNAL_ID</dsLocationType>
 *     <dsChecksumType>DISABLED</dsChecksumType>
 *     <dsChecksum>none</dsChecksum>
 * </datastreamProfile>
 */
function modifyDatastream($pid, $dsID, $file_path = '', $dsLocation = '', $altIDs = '', $dsLabel = '', $versionable = 'true', $dsState = 'A', $formatURI = '',
                          $checksumType = 'DEFAULT', $checksum = '', $mimeType = '', $logMessage = '', $force = 'false', $ignoreContent = 'false') {
  $pid = drupal_urlencode($pid);
//  $dsLocation = drupal_urlencode($dsLocation);
  $dsLabel = drupal_urlencode($dsLabel);
  $formatURI = drupal_urlencode($formatURI);
  $logMessage = drupal_urlencode($logMessage);

  $params = NULL;
  $headers = array('Keep-Alive' => 115,
                   'Connection' => 'keep-alive');

  if (!empty($file_path)) {
    // We must construct a multipart HTTP POST.
    $boundary = 'A0sFSD';
    $headers["Content-Type"] = "multipart/form-data; boundary=$boundary";
    $params = multipart_encode($boundary, array('file' => $file_path));
  }

  $fedora_uri = _insert_credentials_into_url(variable_get('fedora_base_url', 'http://localhost:8080/fedora'), variable_get('fedora_user', 'fedoraAdmin'), variable_get('fedora_password', 'fedoraAdmin'));

  $request = $fedora_uri."/objects/$pid/datastreams/$dsID?";
  $request .= (!empty($dsLocation) ? "dsLocation=$dsLocation&" : '')
           .(!empty($altIDs) ? "altIDs=$altIDs&" : '')
           .(!empty($dsLabel) ? "dsLabel=$dsLabel&" : '')
           .(!empty($versionable) ? "versionable=$versionable&" : '')
           .(!empty($formatURI) ? "formatURI=$formatURI&" : '')
           .(!empty($checksumType) ? "checksumType=$checksumType&" : '')
           .(!empty($checksum) ? "checksum=$checksum&" : '')
           .(!empty($mimeType) ? "mimeType=$mimeType&" : '')
           .(!empty($logMessage) ? "logMessage=$logMessage&" : '')
           .(!empty($force) ? "force=$force&" : '')
           .(!empty($ignoreContent) ? "ignoreContent=$ignoreContent" : '');
  $response = drupal_http_request($request, $headers, 'PUT', $params);
  return $response;
}

function modifyObject($pid, $label = '', $ownerId = '', $state = '', $logMessage = '') {
  $pid = drupal_urlencode($pid);
  $label = drupal_urlencode($label);
  $logMessage = drupal_urlencode($logMessage);
  $fedora_uri = _insert_credentials_into_url(variable_get('fedora_base_url', 'http://localhost:8080/fedora'), variable_get('fedora_user', 'fedoraAdmin'), variable_get('fedora_password', 'fedoraAdmin'));
  $request = $fedora_uri."/objects/$pid?";
  $request .= (!empty($label) ? "label=$label&" : '')
           .(!empty($ownerId) ? "ownerId=$ownerId&" : '')
           .(!empty($state) ? "state=$state" : '')
           .(!empty($logMessage) ? "logMessage=$logMessage" : '');
  $response = drupal_http_request($request, array(), 'PUT');
  return $response;
}

/**
 *
 * @param String $pid persistent identifier of the digital object
 * @param String $dsID datastream identifier
 * @param String $startDT Format: yyyy-MM-dd or yyyy-MM-ddTHH:mm:ssZ - the (inclusive) start date-time stamp of the range. If not specified, this is taken to be the lowest possible value, and thus, the entire version history up to the endDT will be purged
 * @param String $endDT Format: yyyy-MM-dd or yyyy-MM-ddTHH:mm:ssZ - the (inclusive) ending date-time stamp of the range. If not specified, this is taken to be the greatest possible value, and thus, the entire version history back to the startDT will be purged
 * @param String $logMessage a message describing the activity being performed
 * @param String $force (true|false) force the update even if it would break a data contract
 * @return StdClass HTTP response object
 * On Success $response->code will be 204 and $response->error will be 'No content'.
 */
function purgeDatastream($pid, $dsID, $startDT = '', $endDT = '', $logMessage = '', $force = 'false') {
  $pid = drupal_urlencode($pid);
  $logMessage = drupal_urlencode($logMessage);
  $fedora_uri = _insert_credentials_into_url(variable_get('fedora_base_url', 'http://localhost:8080/fedora'), variable_get('fedora_user', 'fedoraAdmin'), variable_get('fedora_password', 'fedoraAdmin'));
  $request = $fedora_uri."/objects/$pid/datastreams/$dsID?";
  $request .= (!empty($startDT) ? "startDT=$startDT&" : '')
           .(!empty($endDT) ? "endDT=$endDT&" : '')
           .(!empty($logMessage) ? "logMessage=$logMessage" : '')
           .(!empty($force) ? "force=$force" : '');
  $response = drupal_http_request($request, array(), 'DELETE');
  return $response;
}

/**
 *
 * @param String $pid
 * @param String $logMessage
 * @param String $force (true|false)
 * @return StdClass HTTP Response object
 * $response->code is 204 on successful delete, $response->error is "No content".
 */
function purgeObject($pid, $logMessage = '', $force = 'false') {
  $pid = drupal_urlencode($pid);
  $logMessage = drupal_urlencode($logMessage);
  $fedora_uri = _insert_credentials_into_url(variable_get('fedora_base_url', 'http://localhost:8080/fedora'), variable_get('fedora_user', 'fedoraAdmin'), variable_get('fedora_password', 'fedoraAdmin'));
  $request = $fedora_uri."/objects/$pid?";
  $request .= (!empty($logMessage) ? "logMessage=$logMessage" : '')
           .(!empty($force) ? "force=$force" : '');
  $response = drupal_http_request($request, array(), 'DELETE');
  return $response;
}

/************************************************************************
 * Utility functions
 ************************************************************************/

/**
 * Inserts a username and password into a URL giving a format like "http://user:pass@domain.com/"
 * This is the format expected by PHP's parse_url function.
 * @param String $url
 * @param String $user
 * @param String $pass
 * @return String
 */
function _insert_credentials_into_url($url, $user, $pass) {
  return (!empty($user) ? substr_replace($url, "$user".(!empty($pass) ? ":$pass@" : '@'), strpos($url, '://') + 3, 0) : $url);
}

function multipart_encode($boundary, $params){
  if (empty($params)) {
    return NULL;
  }

  $output = "";
  foreach ($params as $key => $value){
    $output .= "--$boundary\r\n";
    if ($key == 'file'){
      $output .= multipart_enc_file($value);
    }
    elseif ($key == 'foxml_file') {
      $output .= multipart_enc_xml_file($value);
    }
    else $output .= multipart_enc_text ($key, $value);

  }
  $output .="--$boundary--";
  return $output;
}

function multipart_enc_file($path){
  if (substr($path, 0, 1) == "@") $path = substr($path, 1);
  $filename = basename($path);
  $mimetype = "application/octet-stream";
  $data = "Content-Disposition: form-data; name=\"file\"; filename=\"$filename\"\r\n";
  $data .= "Content-Transfer-Encoding: binary\r\n";
  $data .= "Content-Type: $mimetype\r\n\r\n";
  $data .= file_get_contents($path) . "\r\n";
  return $data;
}

function multipart_enc_xml_file($path){
  if (substr($path, 0, 1) == "@") $path = substr($path, 1);
  $filename = basename($path);
  $mimetype = "text/xml";
  $data = "Content-Disposition: form-data; name=\"file\"; filename=\"$filename\"\r\n";
  $data .= "Content-Transfer-Encoding: UTF-8\r\n";
  $data .= "Content-Type: $mimetype\r\n\r\n";
  $data .= file_get_contents($path) . "\r\n";
  return $data;
}

function multipart_enc_text($name, $value){
  return "Content-Disposition: form-data; name=\"$name\"\r\n\r\n$value\r\n";
}